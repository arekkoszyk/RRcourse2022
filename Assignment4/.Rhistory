f <- list(0,1)
if (typeof(n) != "double" | n < 1) print("Error")
else {
for(i in 0:n+1) {
f <- append(f, f[[i]] + f[[i-1]])
}
for (i in 1:n) {
if (f[[i]] >= n) return(f[[i-1]])
}
}
}
fib(9)
for (i in 1:n) print(i)
for (i in 2:n) print(i)
fib <- function(n) {
f <- list(0,1)
if (typeof(n) != "double" | n < 1) print("Error")
else {
for(i in 0:n+1) {
f <- append(f, f[[i]] + f[[i-1]])
}
for (i in 2:n) {
if (f[[i]] >= n) return(f[[i-1]])
}
}
}
fib(9)
fib <- function(n) {
f <- list(0,1)
if (typeof(n) != "double" | n < 1) print("Error")
else {
for(i in 1:n+1) {
f <- append(f, f[[i]] + f[[i-1]])
}
for (i in 2:n) {
if (f[[i]] >= n) return(f[[i-1]])
}
}
}
fib(9)
fib(25)
f
fib <- function(n) {
f <- list(0,1)
if (typeof(n) != "double" | n < 1) print("Error")
else {
for(i in 1:n+1) {
f <- append(f, f[[i]] + f[[i-1]])
}
for (i in 2:n) {
if (f[[i]] >= n) {
print(f)
return(f[[i-1]])
}
}
}
}
fib(25)
#print(f)
return(f[[i-1]])
fib <- function(n) {
f <- list(0,1)
if (typeof(n) != "double" | n < 1) print("Error")
else {
for(i in 1:n+1) {
f <- append(f, f[[i]] + f[[i-1]])
}
for (i in 2:n) {
if (f[[i]] >= n) {
#print(f)
return(f[[i-1]])
}
}
}
}
fib(25)
f
fib(7245)
f
fib <- function(n) {
f <- list(0,1)
if (typeof(n) != "double" | n < 1) print("Error")
else {
for(i in 1:n+1) {
f <- append(f, f[[i]] + f[[i-1]])
}
for (i in 2:n) {
if (f[[i]] >= n) {
print(f)
return(f[[i-1]])
}
}
}
}
fib(7245)
fib <- function(n) {
f <- list(0,1)
if (typeof(n) != "double" | n < 1) print("Error")
else {
for(i in 1:sqrt(n)) {
f <- append(f, f[[i]] + f[[i-1]])
}
for (i in 2:n) {
if (f[[i]] >= n) {
print(f)
return(f[[i-1]])
}
}
}
}
fib(7245)
floor(sqrt(7256))
sqrt(7256)
fib <- function(n) {
f <- list(0,1)
if (typeof(n) != "double" | n < 1) print("Error")
else {
for(i in 1:floor(sqrt(n))) {
f <- append(f, f[[i]] + f[[i-1]])
}
for (i in 2:n) {
if (f[[i]] >= n) {
print(f)
return(f[[i-1]])
}
}
}
}
fib(7245)
fib <- function(n) {
f <- list(0,1)
if (typeof(n) != "double" | n < 1) print("Error")
else {
for(i in 1:n) {
f <- append(f, f[[i]] + f[[i-1]])
}
for (i in 2:n) {
if (f[[i]] >= n) {
print(f)
return(f[[i-1]])
}
}
}
}
fib(7245)
fib <- function(n) {
f <- list(0,1)
if (typeof(n) != "double" | n < 1) print("Error")
else {
for(i in 1:n) {
f <- append(f, f[[i]] + f[[i-1]])
}
for (i in 2:n) {
if (f[[i]] >= n) {
print(f)
return(f[[i-1]])
}
}
}
}
fib(7245)
for(i in 1:9) print(i)
fib <- function(n) {
f <- list(0,1)
if (typeof(n) != "double" | n < 1) print("Error")
else {
for(i in 2:n) {
f <- append(f, f[[i]] + f[[i-1]])
}
for (i in 2:n) {
if (f[[i]] >= n) {
print(f)
return(f[[i-1]])
}
}
}
}
fib(7245)
fib <- function(n) {
f <- list(0,1)
if (typeof(n) != "double" | n < 1) print("Error")
else {
for(i in 2:floor(sqrt(n))) {
f <- append(f, f[[i]] + f[[i-1]])
}
for (i in 2:n) {
if (f[[i]] >= n) {
print(f)
return(f[[i-1]])
}
}
}
}
fib(7245)
fib <- function(n) {
f <- list(0,1)
if (typeof(n) != "double" | n < 1) print("Error")
else {
for(i in 2:floor(sqrt(n))) {
f <- append(f, f[[i]] + f[[i-1]])
}
for (i in 2:n) {
if (f[[i]] >= n) {
#print(f)
return(f[[i-1]])
}
}
}
}
fib(7245)
fib("7245")
i <- 1
while (i < 6) {
print(i)
i = i+1
}
2%%10
2%10
4562 // 10
4562 / 10
flooor(4562 / 10)
floor(4562 / 10)
# 2) Write a function which reverses digits in an integer number
# (for example 7245 -> 5427). The function should be documented, with type hints,
# and appropriate comments.
reverse <- function(n) {
rev = 0
while (n>0) {
a = n%%10
rev = rev*10 + a
n = floor(n/10)
}
return(rev)
}
reverse(4562)
reverse(7245)
class(2)
# Exercise 2
# 1) Write a function which takes n (float or integer) as a parameter
# and returns the largest Fibonacci number smaller than n.
# The function should be documented, with type hints, and appropriate comments.
fibonacci <- function(n) {
f <- list(0,1)
if (class(n) != "numeric" | n < 1) print("Error")
else {
for(i in 1:n+1) {
f <- append(f, f[[i]] + f[[i-1]])
}
return(f[n+1])
}
}
fibonacci(0)
fibonacci(1)
fibonacci(2)
fibonacci(3)
# Exercise 2
# 1) Write a function which takes n (float or integer) as a parameter
# and returns the largest Fibonacci number smaller than n.
# The function should be documented, with type hints, and appropriate comments.
fibonacci <- function(n) {
f <- list(0,1)
if (class(n) != "numeric" | n < 1) print("Error")
#else if (n == 1) re
else {
for(i in 1:n+1) {
f <- append(f, f[[i]] + f[[i-1]])
}
return(f[n])
}
}
fibonacci(3)
fibonacci(1)
fibonacci(2)
# Exercise 2
# 1) Write a function which takes n (float or integer) as a parameter
# and returns the largest Fibonacci number smaller than n.
# The function should be documented, with type hints, and appropriate comments.
fibonacci <- function(n) {
f <- list(0,1)
if (class(n) != "numeric" | n < 1) print("Error")
#else if (n == 1) re
else {
for(i in 1:n+1) {
f <- append(f, f[[i]] + f[[i-1]])
}
return(f[n])
}
}
# Example
fibonacci(2)
states <- list(Alabama
,Alaska
,Arizona
,Arkansas
,California
,Colorado
,Connecticut
,Delaware
,Florida
,Georgia
,Hawaii
,Idaho
,IllinoisIndiana
,Iowa
,Kansas
,Kentucky
,Louisiana
,Maine
,Maryland
,Massachusetts
,Michigan
,Minnesota
,Mississippi
,Missouri
,MontanaNebraska
,Nevada
,New Hampshire
,New Jersey
,New Mexico
,New York
,North Carolina
,North Dakota
,Ohio
,Oklahoma
,Oregon
,PennsylvaniaRhode Island
,South Carolina
,South Dakota
,Tennessee
,Texas
,Utah
,Vermont
,Virginia
,Washington
,West Virginia
,Wisconsin
,Wyoming)
states <- list(Alabama
,Alaska)
states <- list("Alabama
","Alaska
","Arizona
","Arkansas
","California
","Colorado
","Connecticut
","Delaware
","Florida
","Georgia
","Hawaii
","Idaho
","IllinoisIndiana
","Iowa
","Kansas
","Kentucky
","Louisiana
","Maine
","Maryland
","Massachusetts
","Michigan
","Minnesota
","Mississippi
","Missouri
","MontanaNebraska
","Nevada
","New Hampshire
","New Jersey
","New Mexico
","New York
","North Carolina
","North Dakota
","Ohio
","Oklahoma
","Oregon
","PennsylvaniaRhode Island
","South Carolina
","South Dakota
","Tennessee
","Texas
","Utah
","Vermont
","Virginia
","Washington
","West Virginia
","Wisconsin
","Wyoming")
states
len(states)
length(states)
states <- list("Alabama
","Alaska
","Arizona
","Arkansas
","California
","Colorado
","Connecticut
","Delaware
","Florida
","Georgia
","Hawaii
","Idaho
","Illinois
","Indiana
","Iowa
","Kansas
","Kentucky
","Louisiana
","Maine
","Maryland
","Massachusetts
","Michigan
","Minnesota
","Mississippi
","Missouri
","Montana
","Nebraska
","Nevada
","New Hampshire
","New Jersey
","New Mexico
","New York
","North Carolina
","North Dakota
","Ohio
","Oklahoma
","Oregon
","Pennsylvania
","Rhode Island
","South Carolina
","South Dakota
","Tennessee
","Texas
","Utah
","Vermont
","Virginia
","Washington
","West Virginia
","Wisconsin
","Wyoming")
length(states)
STATES <- toupper(States)
#source: https://state.1keydata.com/
States <- list("Alabama
","Alaska
","Arizona
","Arkansas
","California
","Colorado
","Connecticut
","Delaware
","Florida
","Georgia
","Hawaii
","Idaho
","Illinois
","Indiana
","Iowa
","Kansas
","Kentucky
","Louisiana
","Maine
","Maryland
","Massachusetts
","Michigan
","Minnesota
","Mississippi
","Missouri
","Montana
","Nebraska
","Nevada
","New Hampshire
","New Jersey
","New Mexico
","New York
","North Carolina
","North Dakota
","Ohio
","Oklahoma
","Oregon
","Pennsylvania
","Rhode Island
","South Carolina
","South Dakota
","Tennessee
","Texas
","Utah
","Vermont
","Virginia
","Washington
","West Virginia
","Wisconsin
","Wyoming")
length(States)
STATES <- toupper(States)
STATES
states <- tolower(States)
states
getwd()
setwd("/Users/arek/Desktop/RR/RRcourse2022/Assignment4/")
write.csv(STATES, file = "STATES.csv")
write.csv(states, file = "states.csv")
write.csv(states, file = "states.csv")
write.table(STATES, STATES)
write.csv2(STATES, file = "STATES.csv")
write.csv2(states, file = "states.csv")
getwd()
write.csv2(states, file = "states_low.csv")
write.table(STATES, STATES, append = FALSE, sep = " ", dec = ".",
row.names = TRUE, col.names = TRUE)
lapply(STATES, write, "STATES.txt", append=TRUE)
lapply(states, write, "states.txt", append=TRUE)
lapply(states, write, "states_low.txt", append=TRUE)
